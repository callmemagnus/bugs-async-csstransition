{"version":3,"sources":["asyncComponent.js","ImportedComponent.js","App.js","serviceWorker.js","index.js"],"names":["asyncComponent","importComponent","_React$Component","_class2","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","component","inherits","createClass","key","value","_this2","then","_ref","default","setState","C","react_default","a","createElement","props","React","Component","ImportedComponent","text","setTimeout","AsyncComponent","__webpack_require__","e","bind","App","showAsync","react_transition_group","in","classNames","timeout","src_ImportedComponent","className","style","display","flexDirection","alignItems","onClick","toggleClick","gridGap","gridTemplateColumns","renderComponentWithAnimation","renderAsyncComponentWithAnimation","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oQAkBeA,SAhBQ,SAACC,GACtB,gBAAAC,GAAA,SAAAC,IAAA,IAAAC,EAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,GAAA,QAAAM,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,GAAA,OAAAT,EAAAC,OAAAS,EAAA,EAAAT,CAAAE,MAAAJ,EAAAE,OAAAU,EAAA,EAAAV,CAAAH,IAAAc,KAAAC,MAAAd,EAAA,CAAAI,MAAAW,OAAAP,MACEQ,MAAQ,CACNC,UAAW,MAFfhB,EAAA,OAAAC,OAAAgB,EAAA,EAAAhB,CAAAH,EAAAD,GAAAI,OAAAiB,EAAA,EAAAjB,CAAAH,EAAA,EAAAqB,IAAA,oBAAAC,MAAA,WAIsB,IAAAC,EAAAlB,KAClBP,IACG0B,KAAK,SAAAC,GAAA,IAAYP,EAAZO,EAAGC,QAAH,OAA4BH,EAAKI,SAAS,CAAET,kBANxD,CAAAG,IAAA,SAAAC,MAAA,WASI,IAAMM,EAAIvB,KAAKY,MAAMC,UACrB,OAAOU,EAAIC,EAAAC,EAAAC,cAACH,EAAMvB,KAAK2B,OAAY,SAVvChC,EAAA,CAAqBiC,IAAMC,aCkBdC,6MAlBblB,MAAQ,CACNmB,KAAM,0FAEY,IAAAb,EAAAlB,KAClBgC,WAAW,WACTd,EAAKI,SAAS,CAAES,KAAM,UACrB,sCAGH,OACEP,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAAA,SAAI1B,KAAKY,MAAMmB,cAbSH,IAAMC,WCKhCI,EAAiBzC,EAAe,kBAAM0C,EAAAC,EAAA,GAAAhB,KAAAe,EAAAE,KAAA,YA+D7BC,6MA3DbzB,MAAQ,gFAENZ,KAAKsB,SAAS,CAAEgB,WAAYtC,KAAKY,MAAM0B,wEAGvC,OACEd,EAAAC,EAAAC,cAACa,EAAA,cAAD,CACEC,GAAIxC,KAAKY,MAAM0B,UACfG,WAAW,aACXC,QAAS,KAETlB,EAAAC,EAAAC,cAACO,EAAD,8DAKJ,OACET,EAAAC,EAAAC,cAACa,EAAA,cAAD,CACEC,GAAIxC,KAAKY,MAAM0B,UACfG,WAAW,aACXC,QAAS,KAETlB,EAAAC,EAAAC,cAACiB,EAAD,wCAKJ,OACEnB,EAAAC,EAAAC,cAAA,OAAKkB,UAAU,OACbpB,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,QACEmB,MAAO,CACLC,QAAS,OACTC,cAAe,SACfC,WAAY,WAGdxB,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAAA,UAAQuB,QAASjD,KAAKkD,YAAYd,KAAKpC,OAAvC,aAEFwB,EAAAC,EAAAC,cAACa,EAAA,gBAAD,KACEf,EAAAC,EAAAC,cAAA,OACEmB,MAAO,CACLC,QAAS,OACTK,QAAS,OACTC,oBAAqB,YAGtBpD,KAAKY,MAAM0B,WAAatC,KAAKqD,+BAC7BrD,KAAKY,MAAM0B,WAAatC,KAAKsD,uCAIpC9B,EAAAC,EAAAC,cAAA,gCAvDUG,aCCE0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOrC,EAAAC,EAAAC,cAACoC,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhD,KAAK,SAAAiD,GACjCA,EAAaC","file":"static/js/main.feb45725.chunk.js","sourcesContent":["import React from 'react';\n\nconst asyncComponent = (importComponent) => {\n  return class extends React.Component {\n    state = {\n      component: null\n    }\n    componentDidMount() {\n      importComponent()\n        .then(({ default: component }) => this.setState({ component }))\n    }\n    render() {\n      const C = this.state.component;\n      return C ? <C {...this.props} /> : null;\n    }\n  }\n}\n\nexport default asyncComponent;","import React from 'react';\n\nclass ImportedComponent extends React.Component {\n  state = {\n    text: \"now\"\n  }\n  componentDidMount() {\n    setTimeout(() => {\n      this.setState({ text: \"then\" })\n    }, 2000)\n  }\n  render() {\n    return (\n      <div>\n        <p>Imported component</p>\n        <p>{this.state.text}</p>\n      </div>\n    )\n  }\n}\n\nexport default ImportedComponent;","import React, { Component } from \"react\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\n\nimport \"./App.css\";\nimport asyncComponent from \"./asyncComponent\";\nimport ImportedComponent from \"./ImportedComponent\";\n\nconst AsyncComponent = asyncComponent(() => import(\"./AsyncLoadedComponent\"));\n\nclass App extends Component {\n  showAsync: false;\n  state = {};\n  toggleClick() {\n    this.setState({ showAsync: !this.state.showAsync });\n  }\n  renderAsyncComponentWithAnimation() {\n    return (\n      <CSSTransition\n        in={this.state.showAsync}\n        classNames=\"transition\"\n        timeout={10000}\n      >\n        <AsyncComponent />\n      </CSSTransition>\n    );\n  }\n  renderComponentWithAnimation() {\n    return (\n      <CSSTransition\n        in={this.state.showAsync}\n        classNames=\"transition\"\n        timeout={10000}\n      >\n        <ImportedComponent />\n      </CSSTransition>\n    );\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <header>header</header>\n        <main\n          style={{\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\"\n          }}\n        >\n          <p>\n            <button onClick={this.toggleClick.bind(this)}>Click me</button>\n          </p>\n          <TransitionGroup>\n            <div\n              style={{\n                display: \"grid\",\n                gridGap: \"20px\",\n                gridTemplateColumns: \"1fr 1fr\"\n              }}\n            >\n              {this.state.showAsync && this.renderComponentWithAnimation()}\n              {this.state.showAsync && this.renderAsyncComponentWithAnimation()}\n            </div>\n          </TransitionGroup>\n        </main>\n        <footer>footer</footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}